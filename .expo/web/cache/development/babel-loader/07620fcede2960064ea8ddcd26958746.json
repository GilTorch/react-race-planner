{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/nick/work/nk/sr/ScriptoRerum/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport PropTypes from 'prop-types';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport useLinking from \"./navigation/useLinking\";\nimport SpaceMono from \"./assets/fonts/SpaceMono-Regular.ttf\";\nimport RobotoBlack from \"./assets/fonts/Roboto-Black.ttf\";\nimport RobotoBlackItalic from \"./assets/fonts/Roboto-BlackItalic.ttf\";\nimport RobotoBold from \"./assets/fonts/Roboto-Bold.ttf\";\nimport RobotoBoldItalic from \"./assets/fonts/Roboto-BoldItalic.ttf\";\nimport RobotoItalic from \"./assets/fonts/Roboto-Italic.ttf\";\nimport RobotoLight from \"./assets/fonts/Roboto-Light.ttf\";\nimport RobotoLightItalic from \"./assets/fonts/Roboto-LightItalic.ttf\";\nimport RobotoMedium from \"./assets/fonts/Roboto-Medium.ttf\";\nimport RobotoMediumItalic from \"./assets/fonts/Roboto-MediumItalic.ttf\";\nimport RobotoRegular from \"./assets/fonts/Roboto-Regular.ttf\";\nimport RobotoThin from \"./assets/fonts/Roboto-Thin.ttf\";\nimport RobotoThinItalic from \"./assets/fonts/Roboto-ThinItalic.ttf\";\nimport ScriptoRerumLogo from \"./assets/images/scriptorerum-logo.png\";\nimport AppNavigation from \"./navigation\";\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    }\n\n    return Asset.fromModule(image).downloadAsync();\n  });\n}\n\nfunction cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return Font.loadAsync(font);\n  });\n}\n\nfunction loadAssetsAsync() {\n  var images, fonts, imageAssets, fontAssets;\n  return _regeneratorRuntime.async(function loadAssetsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          images = [ScriptoRerumLogo];\n          fonts = [_objectSpread({}, Ionicons.font, {\n            SpaceMono: SpaceMono,\n            RobotoBlack: RobotoBlack,\n            RobotoBlackItalic: RobotoBlackItalic,\n            RobotoBold: RobotoBold,\n            RobotoBoldItalic: RobotoBoldItalic,\n            RobotoItalic: RobotoItalic,\n            RobotoLight: RobotoLight,\n            RobotoLightItalic: RobotoLightItalic,\n            RobotoMedium: RobotoMedium,\n            RobotoMediumItalic: RobotoMediumItalic,\n            RobotoRegular: RobotoRegular,\n            RobotoThin: RobotoThin,\n            RobotoThinItalic: RobotoThinItalic\n          })];\n          imageAssets = cacheImages(images);\n          fontAssets = cacheFonts(fonts);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(Promise.all([].concat(_toConsumableArray(imageAssets), _toConsumableArray(fontAssets))));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  var containerRef = useRef();\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      initialNavigationState = _useState4[0],\n      setInitialNavigationState = _useState4[1];\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  useEffect(function () {\n    function setupInitialState() {\n      return _regeneratorRuntime.async(function setupInitialState$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = setInitialNavigationState;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 3:\n              _context2.t1 = _context2.sent;\n              (0, _context2.t0)(_context2.t1);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    setupInitialState();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return React.createElement(AppLoading, {\n      startAsync: loadAssetsAsync,\n      onFinish: function onFinish() {\n        return setLoadingComplete(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    ref: containerRef,\n    initialState: initialNavigationState,\n    initialRouteName: \"SignupScreen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, React.createElement(AppNavigation, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })));\n}\nApp.propTypes = {\n  skipLoadingScreen: PropTypes.bool\n};\nApp.defaultProps = {\n  skipLoadingScreen: false\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/nick/work/nk/sr/ScriptoRerum/App.js"],"names":["React","useEffect","useState","useRef","Font","Ionicons","NavigationContainer","PropTypes","AppLoading","Asset","useLinking","SpaceMono","RobotoBlack","RobotoBlackItalic","RobotoBold","RobotoBoldItalic","RobotoItalic","RobotoLight","RobotoLightItalic","RobotoMedium","RobotoMediumItalic","RobotoRegular","RobotoThin","RobotoThinItalic","ScriptoRerumLogo","AppNavigation","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","cacheFonts","fonts","font","loadAsync","loadAssetsAsync","imageAssets","fontAssets","Promise","all","App","props","isLoadingComplete","setLoadingComplete","containerRef","initialNavigationState","setInitialNavigationState","getInitialState","setupInitialState","skipLoadingScreen","styles","container","propTypes","bool","defaultProps","StyleSheet","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { StyleSheet, View, Image } from 'react-native';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport PropTypes from 'prop-types';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\n\nimport useLinking from './navigation/useLinking';\nimport SpaceMono from './assets/fonts/SpaceMono-Regular.ttf';\nimport RobotoBlack from './assets/fonts/Roboto-Black.ttf';\nimport RobotoBlackItalic from './assets/fonts/Roboto-BlackItalic.ttf';\nimport RobotoBold from './assets/fonts/Roboto-Bold.ttf';\nimport RobotoBoldItalic from './assets/fonts/Roboto-BoldItalic.ttf';\nimport RobotoItalic from './assets/fonts/Roboto-Italic.ttf';\nimport RobotoLight from './assets/fonts/Roboto-Light.ttf';\nimport RobotoLightItalic from './assets/fonts/Roboto-LightItalic.ttf';\nimport RobotoMedium from './assets/fonts/Roboto-Medium.ttf';\nimport RobotoMediumItalic from './assets/fonts/Roboto-MediumItalic.ttf';\nimport RobotoRegular from './assets/fonts/Roboto-Regular.ttf';\nimport RobotoThin from './assets/fonts/Roboto-Thin.ttf';\nimport RobotoThinItalic from './assets/fonts/Roboto-ThinItalic.ttf';\n\nimport ScriptoRerumLogo from './assets/images/scriptorerum-logo.png';\nimport AppNavigation from './navigation';\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    }\n    return Asset.fromModule(image).downloadAsync();\n  });\n}\n\nfunction cacheFonts(fonts) {\n  return fonts.map(font => Font.loadAsync(font));\n}\n\nasync function loadAssetsAsync() {\n  const images = [ScriptoRerumLogo];\n\n  const fonts = [\n    {\n      ...Ionicons.font,\n      SpaceMono,\n      RobotoBlack,\n      RobotoBlackItalic,\n      RobotoBold,\n      RobotoBoldItalic,\n      RobotoItalic,\n      RobotoLight,\n      RobotoLightItalic,\n      RobotoMedium,\n      RobotoMediumItalic,\n      RobotoRegular,\n      RobotoThin,\n      RobotoThinItalic\n    }\n  ];\n\n  const imageAssets = cacheImages(images);\n  const fontAssets = cacheFonts(fonts);\n\n  await Promise.all([...imageAssets, ...fontAssets]);\n}\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  const containerRef = useRef();\n  const [initialNavigationState, setInitialNavigationState] = useState();\n  const { getInitialState } = useLinking(containerRef);\n\n  useEffect(() => {\n    async function setupInitialState() {\n      setInitialNavigationState(await getInitialState());\n    }\n\n    setupInitialState();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return <AppLoading startAsync={loadAssetsAsync} onFinish={() => setLoadingComplete(true)} />;\n  }\n\n  return (\n    <View style={styles.container}>\n      <NavigationContainer\n        ref={containerRef}\n        initialState={initialNavigationState}\n        initialRouteName=\"SignupScreen\">\n        <AppNavigation />\n      </NavigationContainer>\n    </View>\n  );\n}\n\nApp.propTypes = {\n  skipLoadingScreen: PropTypes.bool\n};\n\nApp.defaultProps = {\n  skipLoadingScreen: false\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}